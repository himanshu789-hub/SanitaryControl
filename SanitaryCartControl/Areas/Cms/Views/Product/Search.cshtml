@model SanitaryCartControl.Core.Entities.BLLModels.PagedProduct;
@using Microsoft.AspNetCore.Antiforgery;
@inject IAntiforgery antiForgery;

@{
    ViewData["Head"] = "Search Product";
        string pageValue = Context.Request.Query["page"].ToString();
                int currentPage = 1;
                if(pageValue!=null && Int32.TryParse(pageValue,out currentPage))
                {
                       
                }
                else 
                currentPage = 1;
   
}
@using (Html.BeginForm("Search", "Product", FormMethod.Get,new {@id="search-form"}))
{
    <div class="row">
        <div class="col-3 form-group">
           
            @Html.Hidden("page",currentPage)
            
            @Html.TextBox("search","",new {@class="form-control",@placeholder="Enter Name or Code"})
        </div>
        <div class="col-2">
          <button type="submit" class="btn btn-success">Search</button>
        </div>
    </div>
}
@if(Model!=null)
{

    <div class="text-right">
    Total Count : @Model.TotalCount
    </div>
  @if(Model.CurrentPageSize>0)
  {      

                int previousPage = currentPage<=1 ? 1 : currentPage-1;
                int totalPage =(int) Math.Ceiling((decimal)Model.TotalCount/Model.CurrentPageSize);
                int nextPage = currentPage>=totalPage?totalPage:currentPage+1;
                string nextPageLink =  Url.Action("Search",new {search=Context.Request.Query["search"],page=nextPage});
                string previousPageLink =  Url.Action("Search",new {search=Context.Request.Query["search"],page=previousPage});

    <table class="table table-hover">
        <thead>
            
            <td>S.No.</td>
            <th>Code</th>
            <th>Name</th>
            <th>Brand</th>
            <th class="text-center">Items</th>
            <th>Description</th>
            <th class="text-center">Action</th>
            
        </thead>
        <tbody>
            @for (var i = 0 ;i< Model.Products.Count();i++)
            {
                var item = Model.Products.ElementAt(i);
                <tr>
                    <td>@(i+1+(Model.GeneralPageSize*(Model.PageNumber-1)))</td>
                    <td>@item.Code</td>
                    <td>@item.Name</td>
                    <td>@item.Brand.Name</td>
                    <td class="text-center">
                        <table class="table table-bordered table-sm">
                            <thead>
                                <th>
                                    @switch (item.Type)
                                        {
                                            case ((byte)ProductType.ColorVariable):
                                            <span>Color</span>
                                                break;
                                            case ((byte)ProductType.SizeVariable):
                                            <span>Size</span>
                                                break;
                                            case ((byte)ProductType.TypeVaribale):
                                            <span>Type</span>
                                                break;
                                                case ((byte)ProductType.GradeVariable):
                                            <span>Grade</span>
                                                break;
                                                case ((byte)ProductType.MaterialVariable):
                                            <span>Material</span>
                                                break;
                                                
                                            default:
                                            <span></span>
                                                break;
                                        }
                                </th>
                      <!--          <th>Quantity</th> -->
                                <th>Price</th>
                            </thead>
                            <tbody>
                                @foreach (AttributeBLL attributeItem in item.AttributeBLLs)
                                {
                                    <tr>
                                        <td>@attributeItem.Value</td>
                                   <!--  <td> @attributeItem.Quantity </td> -->
                                        <td>@attributeItem.Price</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                    <td><div class="border rounded-lg p-1 overflow descriptionWrapper">@Html.Raw(item.Description)</div></td>
                    <td class="d-flex justify-content-around">
                        @Html.ActionLink("Edit","Edit","Product",new {Id=item.Id},new {@class="btn btn-warning"})
                      <button role="button" onclick="deleteProduct(@Json.Serialize(item.Id))" class="btn btn-danger">Delete</button>    
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-center">
          <nav aria-label="Page navigation example">
  <ul class="pagination">
       <li class="page-item"><a class="page-link" href="@previousPageLink">&laquo; Previous</a></li>
      @for(int i=0;i<totalPage;i++)
      {
          string appendClass=(i+1)==currentPage?"active":"";
          
          string link = Url.Action("Search",new {search=Context.Request.Query["search"],page=(i+1)});
          <li class="page-item @appendClass"><a class="page-link" href="@Json.Serialize(link))">@(i+1)</a></li>
      }
 <li class="page-item"><a class="page-link" href="@nextPageLink">Next &raquo;</a></li>
  </ul>
</nav>

    </div>
}
else{
    <h6 class="alert alert-danger"><i class="fa fa-exclamation" aria-hidden="true"></i> Not Found</h6>
}
}

        @{
var antiforgery = antiForgery.GetAndStoreTokens(httpContext:Context);
string formFieldName = antiforgery.FormFieldName;
string token = antiforgery.RequestToken;

String[] Search=Context.Request.Query["search"];
 string search = null;
 if(Search!=null && Search.Count()>0){
  search = Search[0].ToString();
 }
String[] Pages=Context.Request.Query["page"];
int Page = 1;
 if(Pages!=null && Pages.Count()>0){
    Page =Int32.Parse(Pages[0]);
 }
}

    <script>
   function failedDelete()
        {
            window.location=@Json.Serialize(@Url.Action("DeleteFailed",new {search=search??"",Page}));
        }
      function  successDelete()
        {
            window.location=@Json.Serialize(@Url.Action("DeleteSucced",new {search=search??"",Page}));
        }
       function deleteProduct(id){
            if(id)
            {
          const Id = Number.parseInt(id);
            $.ajax({url:@Json.Serialize(Url.Action("Delete")),async:false,type:'POST',data:{
                Id,
                @Json.Serialize(formFieldName):@Json.Serialize(token)
            },
            success:function(){successDelete()},
            error:function(){failedDelete()}
            });
            }
            else
            failedDelete()
        }
    </script>