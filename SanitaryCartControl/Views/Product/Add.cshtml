@model ProductViewModel;
@using Microsoft.AspNetCore.Mvc;
@{
    var brands = ViewBag.Brands as SelectList;
    ViewData["Head"] = "Add Product";
}
@using (Html.BeginForm("Add", "Product", FormMethod.Post, new { @class = "",@enctype="multipart/form-data" }))
{
    @Html.HiddenFor(e =>e.Product.Type)
    <div class="card m-2">
        <div class="card-header font-weight-bold">Basic Information : </div>
        <div class="card-body">
            <div class="row">
                <div class="col-3 form-group">
                    <label>Brand : </label>
                    @Html.DropDownListFor(modelItem=>modelItem.Product.Brand_Id_FK,brands,"--Select Brand--",new
                {@class="form-control"})
                    @Html.ValidationMessageFor(e=>e.Product.Brand_Id_FK,"",new {@class="text-danger small"},"span")
                </div>
                <div class="col-3 form-group">
                    <label> Category : <span class="loading d-none"><i class="fa fa-spinner fa-pulse fa-fw"></i>
<span class="sr-only">Loading...</span></span></label>
                    @Html.TextBoxFor(e=>e.Product.Category_Id_FK,"",new {@class="d-none w-0 h-0"})
                    <div>
                        <ul id="menu"></ul>
                    </div>
                    @Html.ValidationMessageFor(e=>e.Product.Category_Id_FK,"",new {@class="text-danger small"},"span")
                </div>
                <div class="col-* form-group">
                 <label>Selected Category : </label>         
                <label id="displayBreadCrmps" class="form-control disabled"><small>No Category Selected</small></label>
                </div>
            </div>
            <div class="row">
                <div class="col-3 form-group">
                    <label>Code : </label>
                    @Html.TextBoxFor(e=>e.Product.Code,new {@class="form-control"})
                    @Html.ValidationMessageFor(e=>e.Product.Code,"",new {@class="text-danger small"},"span")
                </div>

                <div class="col-5 form-group">
                    <label>Name : </label>
                    @Html.TextBoxFor(e=>e.Product.Name,new {@class="form-control"})
                    @Html.ValidationMessageFor(e=>e.Product.Name,"",new {@class="text-danger small"},"span")
                </div>
            </div>
            <div class="row">
            <div class="col-md-12 col-lg-6 quill-wrapper form-group">
                <label>Description : </label>
                <div id="quill"></div>
                @Html.TextAreaFor(e=>e.Product.Description,new {@class="invisible",@style="width:0px;height:0px"})
                @Html.ValidationMessageFor(e=>e.Product.Description,"",new {@class="text-danger small"},"span")
            </div>
            </div>
        </div>
    </div>
    <div class="card m-2">
        <div class="card-header font-weight-bold">Specific Information : </div>
        <div class="card-body">
            <div id="attributes-wrapper">
                @Html.ValidationMessageFor(e=>e.Attributes,null,new {@class="text-danger small"},"span")
                <div id="attributes" name="Attributes" id="Attributes" data-val-required="Please, First Select A Category">

                </div>
            </div>
        </div>
    </div>
    <div class="card m-2">
        <div class="card-header font-weight-bold">Select Images : </div>
        <div class="card-body">
            <div class="row">
                <div class="col-2 form-group" id="fileHolder">
                    @Html.TextBoxFor(e=>e.Images,null,new {@class="form-control invisible",@type="file",@multiple="true",@accept="image/jpg, image/jpeg, image/png"})
                    <label for="Images" class="btn btn-outline-success">
                        <span>Browse</span>
                    </label>
                    @Html.ValidationMessageFor(e=>e.Images,null,new {@class="text-danger small"},"label")

                </div>
                <div class="col-* w-75 border border-primary rounded d-flex flex-wrap justify-content-center p-4"
                    id="image-viewer">
                </div>
            </div>

        </div>
    </div>
    @Html.TextBoxFor(e=>e.Product.DateAdded,new {@class="invisible"})
    @Html.TextBoxFor(e=>e.Product.DateUpdated,new {@class="invisible"})
    
    <button type="submit" class="btn btn-success float-right invisible m-3">Submit</button>
}
<noscript>Please, Enable Javascript</noscript>
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>
    $('[type="submit"]').removeClass("invisible");
    var elements = {
        menuId: "#menu",
        textBoxId: "#Category_Id_FK",
        textAreaId: "#Product_Description",
        brandSelection: "#Product_Brand_Id_FK",
        categoryTextBox: "#Product_Category_Id_FK",
        productAttriuttesSection: "#attributes",
        productAttriuttesWrapper: "#attributes-wrapper",
        codeInput: '#Product_Code',
        nameInput: '#Product_Name',
        imageUpload: '#Images',
        imageViewer: '#image-viewer',
        dateField:'#Product_DateAdded',
        dateUpdatedField:'#Product_DateUpdated',
        typeFields:'#Product_Type',
        fileHolder:'#fileHolder',
        breadcrumpLabel:'#displayBreadCrmps'
    };
    var inputNames = {
        fileInput:'Images'
    }
    function reInitializeFileInput(){
        $(elements.fileHolder).children().first().remove();
        var inputFile = $(`<input id='${inputNames.fileInput}' name='${inputNames.fileInput}'
         type='file' accept='image/jpg, image/jpeg, image/png' class="invisible" multiple=true data-val='true' data-val-required="Please, Select Files"/>`);
        $(inputFile).change(ImageChangeEvent)
        $(elements.fileHolder).prepend(inputFile); 
        ResetFormValidation();
    }

    const ImageChangeEvent = function (e) {
        const files = e.target.files;
        debugger;
        if (files && files.length > 0) {
            if(files.length>7)
            {
                alert("Number of Image must be less than 7");
                reInitializeFileInput();
                return false;
            }
           const IsAllFileNotAppropriate=  $(files).filter((index,file)=>{    
                if(Math.ceil(file.size/1024)>64)
                   return true;
            }).length>0;
            if(IsAllFileNotAppropriate)
            {
                alert('Image File Size Too Long.\nEach Must Be Less Than 64KB');
                reInitializeFileInput();
                return false;
            }
            $(elements.imageViewer).children().remove();
            Array.from(files).forEach(e => {
                const reader = new FileReader();
                reader.readAsDataURL(e);
                reader.onload = function (e) {
                    $(elements.imageViewer).append(`<img src='${e.target.result}' class="border rounded m-3 p-1" width='170px' height='170px'/>`)
                };
            });
        }
    }
    $(elements.imageUpload).change(ImageChangeEvent)
    $(elements.nameInput).keyup(function (e) {
        e.preventDefault();
        $(this).val($(this).val().charAt(0).toUpperCase() + $(this).val().slice(1));
    });
    $(elements.codeInput).keyup(function (e) {
        if (e.keyCode >= 65 && e.keyCode <= 90 || e.keyCode == 189)
            $(this).val($(this).val().toUpperCase());
        else
            $(this).val($(this).val().subString(0, $(this).val().length - 1));
    })
       function init()
       {
$(elements.productAttriuttesSection).children().remove();
state.count=0;
       }
    const onError = function () {
                alert('Error Communicating To Server\nPlease, Contact Administration');
                $('[type="submit"]').hide()
        };
    $(elements.brandSelection).change(function (e) {
        debugger;
        const value = $(e.currentTarget).val()
        if (!value)
            return;
        $(elements.menuId).empty();
        init();
        $('.loading').removeClass("d-none")
        $.ajax({
            method: 'GET',
            url: '/Product/GetCategory?brandId=' + value,
            accepts: 'application/json',
            success: function (data) {
                buildMenu($(elements.menuId), data,0)
                $('.loading').addClass("d-none")
             InitializeEvents();
            },
            error:function(){
                onError();
                $('.loading').find('i').removeAttr("class");
                $('.loading').find('i').addClass("text-danger fa fa-exclamation-triangle  fa-2x scale-up-center error-shadow");
            }
        })
    })
    var quill = new Quill('#quill', {
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],
            ]
        },
        theme: 'snow'
    });
    quill.root.setAttribute('spellcheck', false)
    quill.on('text-change', function (delta, oldDelta, source) {
        console.log(quill.container.firstChild.innerHTML)
        $(elements.textAreaId).val(quill.container.firstChild.innerHTML);
    });
    function buildMenu(parent, items,level) {
        $.each(items, function (index, item) {
            var li = $('<li><a href="#">' + this.title + '</a></li>');
            li.appendTo(parent);
            li.attr('data-level',level)
            if (this.categories && this.categories.length > 0) {
                let a = li.find('a');
                a.text(this.title);
                li.addClass("parent")
                a.append('<span class="expand">&raquo;</span>');
                var ul = $('<ul></ul>').attr("id",'child');
                ul.appendTo(li);
                buildMenu(ul, this.categories,level+1);
            }
            else
                li.click(function (e) {
                    $(elements.textBoxId).val(item.id);
                    state.categoryId = item.id;
                    state.IsSelected = false;
                    $.ajax({
                        method: 'GET',
                        async: false,
                        url: '/Product/GetProductType?CategoryId=' + state.categoryId,
                        success: function (data) {
                            if(!data || data==-1)
                            {
                                alert('A Unexpected Error Occured');
                                $('[type="submit"]').hide(); 
                            }
                            if (Number.isInteger(data))
                                state.typeSelected = data;
                            $(elements.typeFields).val(data); 
                        },
                    error:onError
                    });
                    data = new Array();
                    init();
                    $(elements.categoryTextBox).val(state.categoryId);
                    buildAttribute(state.typeSelected, state.categoryId, 0)
                    ResetFormValidation();
                    e.preventDefault();
                });
        });
    }
</script>
<script>
    const types = {
        'Size_Variable': 2,
        'Color_Variable': 3,
        'None_Variable': 5,
        'Type_Variable': 1,
        'Material_Variable':7,
        'Grade_Variable':4
    };
    function GetTypeName(Id) {
        debugger;
        let result;
        
        switch (Id) {
            case types.Size_Variable:
                result = 'Size';
                break;
            case types.Type_Variable:
                result = 'Type';
                break;
            case types.Color_Variable:
                result = 'Color';
                break;
            case types.Grade_Variable:
                result = 'Grade';
                break;
            case types.Material_Variable:
                result = 'Material';
                break;
            default:
                result = "";
                break;
        }
    return result;
    }
    var item = {
        'AttributeId': null,
        'Value': null,
        'Quantity': null,
        'Price': null
    };

    const itemNameandProperties = {
        'ModelName': "Attributes",
        'AttributeIdProperty': "AttributeId",
        'ValueProperty': "Value",
        'QunatityProperty': "Quantity",
        'PriceProperty': "Price"
    };

    var state = {
        count: 0,
        remoteValues: null,
        typeSelected: null,
        categoryId: null,
        IsSelected: false,
        breadcrumps:new Array(),
        level:-1
    };
    function addToBreadcrumps(text){
        localBreadcrumps.push(text);
        state.level++;
    }
    var localBreadcrumps = new Array();
    function appendToBreadrumps(text,index){
      localBreadcrumps  = localBreadcrumps.map(function(value,eindex){
          if(eindex==index)
           return text;
          else if(eindex>index)
          return null;
          else
          return value;
      });
     localBreadcrumps = localBreadcrumps.filter((value) => value!=null || value!=undefined); 
    state.level = index;
    }
    function InitializeEvents(){

    $('#menu>li.parent').mouseenter(function(e){
        debugger;
        localBreadcrumps=new Array();

       addToBreadcrumps($(e.currentTarget).find('>a').text())
       state.level=0;
   e.preventDefault();
    })
    $('#child>li.parent').mouseenter(function(e){
        debugger;
        let text = $(e.currentTarget).find('>a').text();
        let currentLevel = Number.parseInt($(e.currentTarget).attr('data-level'));
        if(currentLevel>state.level)
        addToBreadcrumps(text)
        else
        appendToBreadrumps(text,currentLevel); 
        e.preventDefault();    
    })
    $('#menu li:not(.parent)').click(function(e){
        debugger;
        const level =Number.parseInt($(e.currentTarget).attr('data-level'))
        if(level>state.level)
        addToBreadcrumps($(e.currentTarget).text())
        else 
        appendToBreadrumps($(e.currentTarget).text(),level)
        state.breadcrumps = localBreadcrumps;  
        displayCrumps();
        e.preventDefault();
    })
 function displayCrumps(){
     const withoutRado = state.breadcrumps.join('→').replaceAll('»','');
    
$(elements.breadcrumpLabel).text(withoutRado).removeClass("disabled");
 }
    $('#menu a').mouseenter(function(e){
        e.preventDefault();
    })
    }
    const validationMesage = {
        Price: {
            Required: "Please Enter Price",
            Number: "Please Enter Valid Price",
            Min: "Must be atleast 1",
            Max: "Must be smaller than 1,00,000"
        },
        Quantity: {
            Required: "Please Enter Quantity",
            Max: "Must be atmost 255",
            Min: "Must be atleast 1",
            Digits: "Please Enter Valid Quantity"
        },
        'Dropdown': 'Please Select a ',
        getDropdownMessage: function (name) {
            return this.Dropdown.concat(name)
        }
    };
    const ResetFormValidation = function () {

        $('form')
            .removeData("validator") /* added by the raw jquery.validate plugin */
            .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin*/

        $.validator.unobtrusive.parse($('form'));
    }
    var data = new Array();
    function getNameByProperty(index, propertyName) {
        let result = itemNameandProperties.ModelName + `[${index}]` + '.';
        result = result.concat(propertyName);
        return result;
    }

    function buildAttribute(type, categoryId, index) {
        state.count++;
        if (!data[index])
            data.push(jQuery.extend({}, item))
        data[index][itemNameandProperties.AttributeIdProperty] = type;
        let attributeWrapper = $('<div>').addClass("row");
        let dropdownWrapper = $('<div class="col-2 form-group"></div>');
        let label = $('<label></label>').text(GetTypeName(type));
        let hiddenType = $('<input type="text" class="form-control"/>')
            .hide()
            .attr("name", getNameByProperty(index, itemNameandProperties.AttributeIdProperty))
            .attr("value", (data[index][itemNameandProperties.AttributeIdProperty] + "").toString());

        const dropdownName = getNameByProperty(index, itemNameandProperties.ValueProperty);
        let dropdown = $('<select class="form-control"></select>')
            .attr("data-val", type != types.None_Variable)
            .attr("name", dropdownName)
            .attr("id", `${itemNameandProperties.ModelName}[${index}]_${itemNameandProperties.ValueProperty}`)
            .attr("data-val-required", validationMesage.getDropdownMessage(GetTypeName(state.typeSelected).toLowerCase()))
            .change(function () {
                data[index][itemNameandProperties.ValueProperty] = $(dropdown).val()
            }).click(function () {
                dropdown.children().remove();
                setValues(state.remoteValues);
                dropdown.val(data[index][itemNameandProperties.ValueProperty]);
            })
            .prop('disabled', type === types.None_Variable);
        const setValues = function (remoteValues) {
            data.forEach((e, eIndex) => {
                if (eIndex != index) {
                    const value = e[itemNameandProperties.ValueProperty];
                    remoteValues = remoteValues.filter(e => e.Value != value);
                }
            });
            Array.from(remoteValues).forEach(e => dropdown.append($('<option></option>').val(e.Value).text(e.Value)));
        }.bind(index);
        let dropdownErrorMsg = $('<span data-valmsg-replace="true"><span>')
            .attr("data-valmsg-for", dropdownName)
            .addClass("small text-danger");
        
        if (!state.IsSelected)
            $.ajax({
                method: 'GET',
                async: false,
                url: '@Url.Action("GetValues")' + `?type=${type}&categoryId=${categoryId}`,
                success: function (data) {
                    state.IsSelected = true;
                    state.remoteValues = data;
                    setValues(state.remoteValues);
                },
                error:onError
            });
        else {
            setValues(state.remoteValues);
        }
        dropdown.val(data[index][itemNameandProperties.ValueProperty]);

        dropdownWrapper.append([label, dropdown, dropdownErrorMsg]);

        let quantityWrapper = $('<div class="col-2 form-group"><label>Quantity : </label></div>');
        const quantityName = getNameByProperty(index, itemNameandProperties.QunatityProperty);
        const quantityValidator = $('<span data-valmsg-replace="true">')
            .attr("data-valmsg-for", quantityName).addClass("small text-danger");
        let quantity = $('<input type="text" class="form-control" data-val="true"/>')
            .val(data[index][itemNameandProperties.QunatityProperty])
            .attr("name", quantityName)
            .attr("id", `${itemNameandProperties.ModelName}[${index}]_${itemNameandProperties.QunatityProperty}`)
            .attr("data-val-required", validationMesage.Quantity.Required)
            .attr("data-rule-digits", validationMesage.Quantity.Digits)
            .attr("data-msg-digits", validationMesage.Quantity.Digits)
            .attr("data-msg-min", validationMesage.Quantity.Min)
            .attr("data-msg-max", validationMesage.Quantity.Max)
            .attr("data-rule-min", 1)
            .attr("data-rule-max", 255)

            .focusout(function () {
                data[index][itemNameandProperties.QunatityProperty] = $(quantity).val();
            }.bind(index));
        quantityWrapper.append([quantity, quantityValidator]);

        let priceWrapper = $('<div class="col-2 form-group"><label>Price : </label></div>');
        const priceName = getNameByProperty(index, itemNameandProperties.PriceProperty);
        let priceErrorMsg = $('<span data-valmsg-replace="true">').addClass("small text-danger")
            .attr("data-valmsg-for", priceName);
        let price = $('<input type="text" class="form-control"  data-val="true"/>')
            .val(data[index][itemNameandProperties.PriceProperty])
            .attr("name", priceName)
            .attr("data-val-required", validationMesage.Price.Required)
            .attr("data-rule-numer", true)
            .attr("data-rule-min", 1)
            .attr("data-msg-min", validationMesage.Price.Min)
            .attr("data-rule-max", 99999.9999)
            .attr("data-max-msg", validationMesage.Price.Max)
            .attr("data-msg-numer", validationMesage.Price.Number)
            .attr("id", `${itemNameandProperties.ModelName}[${index}]_${itemNameandProperties.PriceProperty}`)
            .focusout(function () {
                data[index][itemNameandProperties.PriceProperty] = $(price).val();
            }.bind(index));
        priceWrapper.append([price, priceErrorMsg]);
        const editWrapper = $('<div class="col-1" id="edit-wrapper"></div>')
        const plusSign = $('<label class="display-1 text-success plusSign"><i class="fa fa-plus-circle"></i></label>')
            .attr("id", "plus-sign")
            .click(function () {
                buildAttribute(state.typeSelected, state.categoryId, index + 1);
                ResetFormValidation();
            }.bind(index));

        if (type != types.None_Variable)
            attributeWrapper.append(dropdownWrapper);
        attributeWrapper.append([quantityWrapper, priceWrapper,hiddenType]);
        const minusSign = $('<label class="display-1 text-danger"><i class="fa fa-minus-circle"></i></label>')
            .attr("id", "minus-sign")
            .click(function (e) {
                data = data.filter((e, eIndex) => eIndex != index);
                $(elements.productAttriuttesSection).children().remove();
                const loop = --state.count;
                state.count = 0;
                for (let i = 0; i < loop; i++) {
                    buildAttribute(state.typeSelected, state.categoryId, i);
                }
                ResetFormValidation();
            }.bind(index));

        $('.plusSign').remove()
        if (index != state.remoteValues.length - 1)
            editWrapper.append(plusSign)
        if (index != 0) {
            editWrapper.prepend(minusSign)
        }
        if (type && type != types.None_Variable)
            attributeWrapper.append(editWrapper);
        $(elements.productAttriuttesSection).append(attributeWrapper);
    }
</script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script>
    $(elements.dateField).removeAttr('data-val-required')
    $(elements.dateUpdatedField).removeAttr('data-val-required')
    $('[type="submit"]').click(function(e){
  const date = new Date().toISOString();
    $(elements.dateField).val(date);
    $(elements.dateUpdatedField).val(date);
    $(this).submit();
    });
</script>