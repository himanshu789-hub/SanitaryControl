@model ProductEditViewModel
@{
    ViewData["Head"] = "Edit Product : " + Model.Product.Code;
}
<div class="card">
    <div class="card-header font-weight-bold">Basic Information : </div>
    <div class="card-body">
        <div class="row">
            <div class="col-3 form-group">
                <label>Code</label>
                @Html.TextBoxFor(e=>e.Product.Code,"",new {@class="form-control",@disabled="true"})
            </div>
            <div class="col-4 form-group">
                <label>Category : </label>
                @Html.TextBoxFor(e=>e.BreadCrumps,"",new {@class="form-control",@disabled="true"})
            </div>
            <div class="col-4 form-group">
                <label>Name : </label>
                @Html.TextBoxFor(e=>e.Product.Name,"",new {@class="form-control",@disabled="true"})
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { @enctype = "multipart-form-data" }))
{
    <div class="card">
        <div class="card-header font-weight-bold">Edit Informaton : </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-12 col-lg-6 quill-wrapper form-group">
                    <label>Description : </label>
                    <div id="quill">

                    </div>
                    @Html.TextAreaFor(e=>e.Product.Description,new {@class="invisible",@style="width:0px;height:0px"})
                    @Html.ValidationMessageFor(e=>e.Product.Description,"",new {@class="text-danger small"},"span")
                </div>
            </div>
         <div class="container-fluid">
              @for (int i=0;i<Model.Attributes.Count();i++)
              {
                  <div class="row">
                     <div class="d-none">
                         @Html.TextBoxFor(e=>e.Attributes.ElementAt(i).Id);
                         @Html.TextBoxFor(e=>e.Attributes.ElementAt(i).AttributeId);
                     </div>
                  
                     <div class="col-3 form-group">
                        <label>@Model.Type : </label>
                        @Html.TextBoxFor(e=>e.Attributes.ElementAt(i).Value,"",new {@class="",@disabled="true"})
                     </div>
                  
                     <div class="col-3 form-group">
                        <label>Quantity : </label>

                    @{
                     var name = $"Attributes[{i}].Quantity";
                     }
                <div class="input-group">
                <span class="input-group-btn">
                <button type="button" class="btn btn-default btn-number" disabled="disabled" 
              data-type="minus" data-field="@name">
                <span class="glyphicon glyphicon-minus"></span>
                </button>
                </span>
                @Html.TextBoxFor(e=>e.Attributes.ElementAt(i).Quantity,"",new {@class="form-control input-number",@min="1",@max="255"})
                <span class="input-group-btn">
                <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="@name">
                <span class="glyphicon glyphicon-plus"></span>
                </button>
                </span>
               </div>
                 @Html.ValidationMessageFor(e=>e.Attributes.ElementAt(i).Quantity,null,new {@class="text-danger small"})
                    
                </div>
                <div class="col-3">
                 <label>Price : </label>
                 @Html.TextBoxFor(e=>e.Attributes.ElementAt(i).Price,"",new {@class="form-control"})
                 @Html.ValidationMessageFor(e=>e.Attributes.ElementAt(i).Price,null,new {@class="text-danger small"})
                </div>
                <div class="col-2">
            
                </div>
                </div>
              }
            </div>
        </div>
    </div>
}


<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>
    var elements = {
        textAreaId:'#Product_Description'
    }
    var quill = new Quill('#quill', {
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],
            ]
        },
        theme: 'snow'
    });
    quill.root.innerHTML = @Model.Product.Description;
    quill.root.setAttribute('spellcheck', false)
    quill.on('text-change', function (delta, oldDelta, source) {
        $(elements.textAreaId).val(quill.container.firstChild.innerHTML);
    });

    $('.btn-number').click(function(e){
    e.preventDefault();

    fieldName = $(this).attr('data-field');
    type      = $(this).attr('data-type');
    var input = $("input[name='"+fieldName+"']");
    var currentVal = parseInt(input.val());
    if (!isNaN(currentVal)) {
        if(type == 'minus') {

            if(currentVal > input.attr('min')) {
                input.val(currentVal - 1).change();
            } 
            if(parseInt(input.val()) == input.attr('min')) {
                $(this).attr('disabled', true);
            }

        } else if(type == 'plus') {

            if(currentVal < input.attr('max')) {
                input.val(currentVal + 1).change();
            }
            if(parseInt(input.val()) == input.attr('max')) {
                $(this).attr('disabled', true);
            }

        }
    } else {
        input.val(0);
    }
});
$('.input-number').focusin(function(){
   $(this).data('oldValue', $(this).val());
});
$('.input-number').change(function() {
    minValue =  parseInt($(this).attr('min'));
    maxValue =  parseInt($(this).attr('max'));
    valueCurrent = parseInt($(this).val());
    name = $(this).attr('name');
    if(valueCurrent >= minValue) {
        $(".btn-number[data-type='minus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the minimum value was reached');
        $(this).val($(this).data('oldValue'));
    }
    if(valueCurrent <= maxValue) {
        $(".btn-number[data-type='plus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the maximum value was reached');
        $(this).val($(this).data('oldValue'));
    }


});
$(".input-number").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
             // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) || 
             // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
                 // let it happen, don't do anything
                 return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
</script>