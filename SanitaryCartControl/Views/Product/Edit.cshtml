@model ProductEditViewModel
@{
    ViewData["Head"] = "Edit Product : " + Model.Product.Code;
}
@using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { @enctype = "multipart-form-data" }))
{
    @Html.HiddenFor(e=>e.Product.Category_Id_FK)
    @Html.HiddenFor(e=>e.Product.Brand_Id_FK)
    @Html.HiddenFor(e=>e.Product.Type)
    @Html.HiddenFor(e=>e.Product.Id)
    @Html.HiddenFor(e=>e.Product.Type)
<div class="card">
    <div class="card-header font-weight-bold">Basic Information : </div>
    <div class="card-body">
        <div class="row">
            <div class="col-3 form-group">
                <label>Code</label>
                @Html.TextBoxFor(e=>e.Product.Code,"",new {@class="form-control",@disabled="true"})
            </div>
            <div class="col-4 form-group">
                <label>Category : </label>
                @Html.TextBoxFor(e=>e.BreadCrumps,"",new {@class="form-control",@disabled="true"})
            </div>
            <div class="col-4 form-group">
                <label>Brand : </label>
                    <div class="d-flex justify-content-around align-items-start">
                    <span>@Html.TextBoxFor(e=>e.Brand.Name,"",new {@class="form-control",@disabled="true"})</span>
                    <span><img src="@Model.Brand.ImagePath" width="99px" height="70px" class="border rounded"/></span>
                </div>
            </div>
        </div>
    </div>
</div>
    <div class="card">
        <div class="card-header font-weight-bold">Edit Informaton : </div>
        <div class="card-body">
            <div class="row">
            <div class="col-4 form-group">
                <label>Name : </label>
                @Html.TextBoxFor(e=>e.Product.Name,"",new {@class="form-control"})
            </div>
                <div class="col-md-8 col-lg-6 quill-wrapper form-group">
                    <label>Description : </label>
                    <div id="quill">

                    </div>
                    @Html.TextAreaFor(e=>e.Product.Description,new {@class="invisible",@style="width:0px;height:0px"})
                    @Html.ValidationMessageFor(e=>e.Product.Description,"",new {@class="text-danger small"},"span")
                </div>
            </div>
         <div class="container-fluid">
              @for (int i=0;i<Model.Attributes.Count();i++)
              {
                  <div class="row">
                     <div class="d-none">
                         @Html.TextBoxFor(e=>e.Attributes[i].Id);
                         @Html.TextBoxFor(e=>e.Attributes[i].AttributeId);
                     </div>
                  
                     <div class="col-3 form-group">
                        <label>@switch(Model.Product.Type)
                                        {
                                            case ((byte)ProductType.ColorVariable):
                                            <span>Color</span>
                                                break;
                                            case ((byte)ProductType.SizeVariable):
                                            <span>Size</span>
                                                break;
                                            case ((byte)ProductType.TypeVaribale):
                                            <span>Type</span>
                                                break;
                                            default:
                                            <span></span>
                                                break;
                                        } </label>
                        @Html.TextBoxFor(e=>e.Attributes[i].Value,"",new {@class="form-control",@disabled="true"})
                     </div>
                  
                     <div class="col-3 form-group">
                        <label>Quantity : </label>

                    @{
                     var name = $"Attributes[{i}].Quantity";
            }
                <div class="input-group">
                <span class="input-group-prepend">
                <button type="button" class="btn btn-default btn-number bg-danger text-white" 
              data-type="minus" data-field="@name">
                <span class="fa fa-minus"></span>
                </button>
                </span>
                @Html.TextBoxFor(e=>e.Attributes[i].Quantity,"",new {@class="form-control input-number",@min="1",@max="255"})
                <span class="input-group-append">
                <button type="button" class="btn btn-default btn-number bg-success text-white" data-type="plus" data-field="@name">
                <span class="fa fa-plus"></span>
                </button>
                </span>
               </div>
                 @Html.ValidationMessageFor(e=>e.Attributes[i].Quantity,null,new {@class="text-danger small"})        
                </div>
                <div class="col-3">
                 <label>Price : </label>
                 @Html.TextBoxFor(e=>e.Attributes[i].Price,"",new {@class="form-control"})
                 @Html.ValidationMessageFor(e=>e.Attributes[i].Price,null,new {@class="text-danger small"})
                </div>
                <div class="col-2 form-group">
                    <label>Status : </label>
                 @Html.CheckBoxFor(e=>e.Attributes[i].IsActive,
                 new {@data_on="Visible",@data_off="Hidden",@data_toggle="toggle", @data_onstyle="info" ,@data_offstyle="danger"})
                <script type="text/javascript">
                    $('head').append('<link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet"/>');
                </script>
                <style>
                    .toggle-handle
                    {
                        background-color: white;
                    }
                </style>
                </div>
                </div>
              }
            </div>
            <div>
    <p class="p-2 m-0">
  <a class="btn btn-primary" data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
        Upload Images <span class="small text-light">Optional</span>
  </a>
</p>
    <div class="collapse shadow p-3 mb-5 bg-white rounded" id="collapseExample">
  <div class="card card-body">
    <div class="row">
        <div class="col-3">
            <label class="btn btn-outline-warning" for="Images">Browse</label>
                <input name="Images" id="Images" type="file" multiple="true" class="invisible" accept="image/jpg, image/jpeg, image/png"/>
                @Html.ValidationMessageFor(e=>e.Images,"",new {@class="text-danger small"},"span")
        </div>
            <div id="image-viewer" 
            class="w-75 border border-primary rounded d-flex flex-wrap justify-content-center p-4">
                @foreach (var item in Model.Images)
                {
                    <img src="@item" class="border rounded m-3 p-1" width="170px" height="170px" />
                }
            </div>
            
    </div>
    </div>
    </div>
    </div>

        </div>
    </div>
    <div class="float-right w-75 d-flex justify-content-around">
            @Html.ActionLink("Cancel", null, null, null, new { @href = "#" ,@onclick="history.go(-1);",@class="btn btn-outline-danger p-2 w-50 mr-2" })
            <button type="submit" class="btn btn-success w-25 p-2">Update</button>
    </div> 
}


<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>
    var elements = {
        textAreaId:'#Product_Description'
    }
    var quill = new Quill('#quill', {
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],
            ]
        },
        theme: 'snow'
    });
    quill.root.innerHTML = "@Html.Raw(@Model.Product.Description)";
    quill.root.setAttribute('spellcheck', false)
    quill.on('text-change', function (delta, oldDelta, source) {
        $(elements.textAreaId).val(quill.container.firstChild.innerHTML);
    });

    const valueChange = function(e){
    e.preventDefault();

    fieldName = $(this).attr('data-field');
    type      = $(this).attr('data-type');
    var input = $("input[name='"+fieldName+"']");
    var currentVal = parseInt(input.val());
    if (!isNaN(currentVal)) {
        if(type == 'minus') {

            if(currentVal > input.attr('min')) {
                input.val(currentVal - 1).change();
            } 
            if(parseInt(input.val()) == input.attr('min')) {
                $(this).attr('disabled', true);
            }

        } else if(type == 'plus') {

            if(currentVal < input.attr('max')) {
                input.val(currentVal + 1).change();
            }
            if(parseInt(input.val()) == input.attr('max')) {
                $(this).attr('disabled', true);
            }

        }
    } else {
        input.val(0);
    }
};
    $('.btn-number').click(valueChange);
$('.input-number').focusin(function(){
   $(this).data('oldValue', $(this).val());
});
$('.input-number').change(function() {
    minValue =  parseInt($(this).attr('min'));
    maxValue =  parseInt($(this).attr('max'));
    valueCurrent = parseInt($(this).val());
    name = $(this).attr('name');
    if(valueCurrent >= minValue) {
        $(".btn-number[data-type='minus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the minimum value was reached');
        $(this).val($(this).data('oldValue'));
    }
    if(valueCurrent <= maxValue) {
        $(".btn-number[data-type='plus'][data-field='"+name+"']").removeAttr('disabled')
    } else {
        alert('Sorry, the maximum value was reached');
        $(this).val($(this).data('oldValue'));
    }


});
$(".input-number").keydown(function (e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
             // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) || 
             // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
                 // let it happen, don't do anything
                 return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    });
</script>
<script>
    $('[type="submit"]').removeClass("invisible");
    var elements = {
        menuId: "#menu",
        textBoxId: "#Category_Id_FK",
        textAreaId: "#Product_Description",
        brandSelection: "#Product_Brand_Id_FK",
        categoryTextBox: "#Product_Category_Id_FK",
        productAttriuttesSection: "#attributes",
        productAttriuttesWrapper: "#attributes-wrapper",
        codeInput: '#Product_Code',
        nameInput: '#Product_Name',
        imageUpload: '#Images',
        imageViewer: '#image-viewer',
        dateField:'#Product_DateAdded'
    };
    $(elements.imageUpload).change(function (e) {
        const files = e.target.files;
        debugger;
        if (files && files.length > 0) {
            $(elements.imageViewer).children().remove();
            Array.from(files).forEach(e => {
                const reader = new FileReader();
                reader.readAsDataURL(e);
                reader.onload = function (e) {
                    $(elements.imageViewer).append(`<img src='${e.target.result}' class="border rounded m-3 p-1" width='170px' height='170px'/>`)
                };
            });
        }
    });
    $(elements.nameInput).keyup(function (e) {
        e.preventDefault();
        $(this).val($(this).val().charAt(0).toUpperCase() + $(this).val().slice(1));
    });
    $(elements.codeInput).keyup(function (e) {
        if (e.keyCode >= 65 && e.keyCode <= 90 || e.keyCode == 189)
            $(this).val($(this).val().toUpperCase());
        else
            $(this).val($(this).val().subString(0, $(this).val().length - 1));
    })

    $(elements.brandSelection).change(function (e) {
        debugger;
        const value = $(e.currentTarget).val()
        if (!value)
            return;
        $(elements.menuId).empty();
        $('.loading').removeClass("d-none")
        $.ajax({
            method: 'GET',
            url: '/Product/GetCategory?brandId=' + value,
            accepts: 'application/json',
            
            success: function (data) {
                debugger;
                buildMenu($(elements.menuId), data)
                $('.loading').addClass("d-none")
            }
        })
    });
    function buildMenu(parent, items) {
        $.each(items, function (index, item) {
            var li = $('<li class="parent"><a href="#">' + this.title + '</a></li>');
            li.appendTo(parent);
            if (this.categories && this.categories.length > 0) {
                let a = li.find('a');
                a.text(this.title);
                a.append('<span class="expand">&raquo;</span>');
                var ul = $('<ul></ul>').addClass('child');
                ul.appendTo(li);
                buildMenu(ul, this.categories);
            }
            else
                li.click(function (e) {
                    $(elements.textBoxId).val(item.id);
                    state.categoryId = item.id;
                    state.IsSelected = false;
                    $.ajax({
                        method: 'GET',
                        async: false,
                        url: '/Product/GetProductType?CategoryId=' + state.categoryId,
                        success: function (data) {
                            if (Number.isInteger(data))
                                state.typeSelected = data;
                        }
                    });
                    data = new Array();
                    $(elements.productAttriuttesSection).children().remove()
                    $(elements.categoryTextBox).val(state.categoryId);
                    buildAttribute(state.typeSelected, state.categoryId, 0)
                    ResetFormValidation();
                    e.preventDefault();
                });
        });
    }
</script>
<script>
    const types = {
        'Size_Variable': 2,
        'Color_Variable': 1,
        'None_Variable': 3,
        'Type_Variable': 4,
    };
    function GetTypeName(Id) {
        let result;
        switch (Id) {
            case types.Size_Variable:
                result = 'Size';
                break;
            case types.Type_Variable:
                result = 'Type';
                break;
            case types.Color_Variable:
                result = 'Color';
                break;
            default:
                result = "";
                break;

        }
        return result;
    }
    var item = {
        'AttributeId': null,
        'Value': null,
        'Quantity': null,
        'Price': null,
        'IsActive':true
    };

    const itemNameandProperties = {
        'ModelName': "Attributes",
        'AttributeIdProperty': "AttributeId",
        'ValueProperty': "Value",
        'QunatityProperty': "Quantity",
        'PriceProperty': "Price",
        'IsActiveProperty':"IsActive"
    };

    var data =Array.from(JSON.parse('@Json.Serialize(@Model.Attributes)'));
    var state = {
        count:data.length,
        remoteValues: null,
        typeSelected: null,
        categoryId: null,
        IsSelected: false
    };

    const validationMesage = {
        Price: {
            Required: "Please Enter Price",
            Number: "Please Enter Valid Price",
            Min: "Must be atleast 1",
            Max: "Must be smaller than 1,00,000"
        },
        Quantity: {
            Required: "Please Enter Quantity",
            Max: "Must be atmost 255",
            Min: "Must be atleast 1",
            Digits: "Please Enter Valid Quantity"
        },
        'Dropdown': 'Please Select a ',
        getDropdownMessage: function (name) {
            return this.Dropdown.concat(name)
        }
    };
    const ResetFormValidation = function () {

        $('form')
            .removeData("validator") /* added by the raw jquery.validate plugin */
            .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin*/

        $.validator.unobtrusive.parse($('form'));
    }
    function getNameByProperty(index, propertyName) {
        let result = itemNameandProperties.ModelName + `[${index}]` + '.';
        result = result.concat(propertyName);
        return result;
    }

    function buildAttribute(type, categoryId, index) {
        state.count++;
        if (!data[index])
            data.push(jQuery.extend({}, item))
        data[index][itemNameandProperties.AttributeIdProperty] = type;
        let attributeWrapper = $('<div>').addClass("row");
        let dropdownWrapper = $('<div class="col-2 form-group"></div>');
        let label = $('<label></label>').text(GetTypeName(type));
        let hiddenType = $('<input type="text" class="form-control"/>')
            .hide()
            .attr("name", getNameByProperty(index, itemNameandProperties.AttributeIdProperty))
            .attr("value", (data[index][itemNameandProperties.AttributeIdProperty] + "").toString());

        const dropdownName = getNameByProperty(index, itemNameandProperties.ValueProperty);
        let dropdown = $('<select class="form-control"></select>')
            .attr("data-val", type != types.None_Variable)
            .attr("name", dropdownName)
            .attr("id", `${itemNameandProperties.ModelName}[${index}]_${itemNameandProperties.ValueProperty}`)
            .attr("data-val-required", validationMesage.getDropdownMessage(GetTypeName(state.typeSelected).toLowerCase()))
            .change(function () {
                data[index][itemNameandProperties.ValueProperty] = $(dropdown).val()
            }).click(function () {
                dropdown.children().remove();
                setValues(state.remoteValues);
                dropdown.val(data[index][itemNameandProperties.ValueProperty]);
            })
            .prop('disabled', type === types.None_Variable);
        const setValues = function (remoteValues) {
            data.forEach((e, eIndex) => {
                if (eIndex != index) {
                    const value = e[itemNameandProperties.ValueProperty];
                    remoteValues = remoteValues.filter(e => e.Value != value);
                }
            });
            Array.from(remoteValues).forEach(e => dropdown.append($('<option></option>').val(e.Value).text(e.Value)));
        }.bind(index);
        let dropdownErrorMsg = $('<span data-valmsg-replace="true"><span>')
            .attr("data-valmsg-for", dropdownName)
            .addClass("small text-danger");

        if (!state.IsSelected)
            $.ajax({
                method: 'GET',
                async: false,
                url: '@Url.Action("GetValues")' + `?type=${type}&categoryId=${categoryId}`,
                success: function (data) {
                    state.IsSelected = true;
                    state.remoteValues = data;
                    setValues(state.remoteValues);
                }
            });
        else {
            setValues(state.remoteValues);
        }
        dropdown.val(data[index][itemNameandProperties.ValueProperty]);

        dropdownWrapper.append([label, hiddenType, dropdown, dropdownErrorMsg]);

        let quantityWrapper = $('<div class="col-2 form-group"><label>Quantity : </label></div>');
        const quantityName = getNameByProperty(index, itemNameandProperties.QunatityProperty);
        const quantityValidator = $('<span data-valmsg-replace="true">')
            .attr("data-valmsg-for", quantityName).addClass("small text-danger");
        let quantity = $('<input type="text" class="form-control" data-val="true"/>')
            .val(data[index][itemNameandProperties.QunatityProperty])
            .attr("name", quantityName)
            .attr("id", `${itemNameandProperties.ModelName}[${index}]_${itemNameandProperties.QunatityProperty}`)
            .attr("data-val-required", validationMesage.Quantity.Required)
            .attr("data-rule-digits", validationMesage.Quantity.Digits)
            .attr("data-msg-digits", validationMesage.Quantity.Digits)
            .attr("data-msg-min", validationMesage.Quantity.Min)
            .attr("data-msg-max", validationMesage.Quantity.Max)
            .attr("data-rule-min", 1)
            .attr("data-rule-max", 255)

            .focusout(function () {
                data[index][itemNameandProperties.QunatityProperty] = $(quantity).val();
            }.bind(index));
        quantityWrapper.append([quantity, quantityValidator]);

        let priceWrapper = $('<div class="col-2 form-group"><label>Price : </label></div>');
        const priceName = getNameByProperty(index, itemNameandProperties.PriceProperty);
        let priceErrorMsg = $('<span data-valmsg-replace="true">').addClass("small text-danger")
            .attr("data-valmsg-for", priceName);
        let price = $('<input type="text" class="form-control"  data-val="true"/>')
            .val(data[index][itemNameandProperties.PriceProperty])
            .attr("name", priceName)
            .attr("data-val-required", validationMesage.Price.Required)
            .attr("data-rule-numer", true)
            .attr("data-rule-min", 1)
            .attr("data-msg-min", validationMesage.Price.Min)
            .attr("data-rule-max", 99999.9999)
            .attr("data-max-msg", validationMesage.Price.Max)
            .attr("data-msg-numer", validationMesage.Price.Number)
            .attr("id", `${itemNameandProperties.ModelName}[${index}]_${itemNameandProperties.PriceProperty}`)
            .focusout(function () {
                data[index][itemNameandProperties.PriceProperty] = $(price).val();
            }.bind(index));
        priceWrapper.append([price, priceErrorMsg]);
        const editWrapper = $('<div class="col-1" id="edit-wrapper"></div>')
        const plusSign = $('<label class="display-1 text-success plusSign"><i class="fa fa-plus-circle"></i></label>')
            .attr("id", "plus-sign")
            .click(function () {
                buildAttribute(state.typeSelected, state.categoryId, index + 1);
                ResetFormValidation();
            }.bind(index));

        if (type != types.None_Variable)
            attributeWrapper.append(dropdownWrapper);
        attributeWrapper.append([quantityWrapper, priceWrapper]);
        const minusSign = $('<label class="display-1 text-danger"><i class="fa fa-minus-circle"></i></label>')
            .attr("id", "minus-sign")
            .click(function (e) {
                data = data.filter((e, eIndex) => eIndex != index);
                $(elements.productAttriuttesSection).children().remove();
                const loop = --state.count;
                state.count = 0;
                for (let i = 0; i < loop; i++) {
                    buildAttribute(state.typeSelected, state.categoryId, i);
                }
                ResetFormValidation();
            }.bind(index));

        $('.plusSign').remove()
        if (index != state.remoteValues.length - 1)
            editWrapper.append(plusSign)
        if (index != 0) {
            editWrapper.prepend(minusSign)
        }
        if (type && type != types.None_Variable)
            attributeWrapper.append(editWrapper);
        $(elements.productAttriuttesSection).append(attributeWrapper);
    }
</script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script>
    $(elements.dateField).removeAttr('data-val-required')
    $('[type="submit"]').click(function(e){
    $(elements.dateField).val(new Date().toISOString());
    $(this).submit();
    });
</script>


<script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>